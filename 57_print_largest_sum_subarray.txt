https://www.geeksforgeeks.org/problems/maximum-sub-array5443/1

# this solution works if you just have to print the subarray
class Solution:
    def findSubarray(self, arr):
        lmax, gmax, res, start = arr[0], arr[0], [0, 0], 0
        for i in range(1, len(arr)):
            e = arr[i]
            if e > lmax + arr[i]:
                start = i
            lmax = max(lmax + arr[i], e)
            # condition below should be >= if for array [1, 2, 3, 0] we have to return [1, 2, 3, 0]
            # this condition will return [1, 2, 3] instead of [1, 2, 3, 0]
            if lmax > gmax:
                res = [start, i]
            gmax = max(gmax, lmax)
        return arr[res[0]: res[1]+1]

# but since the question asks largest suarry with non negative integers
# and [-1] if no positive integer array exists
# and the longest subarray, so [1, 2, 3, 0] will give [1, 2, 3, 0]

class Solution:
    def findSubarray(self, arr):
    	lmax, gmax, res, start = arr[0], arr[0], [0, 0], 0
    	for i in range(1, len(arr)):
    	    e = arr[i]
    	    if e > -1:
        	    if e > lmax + arr[i]:
        	        start = i
        	    lmax = max(lmax + arr[i], e)
        	else:
                # if we encounter -ve element set lmax to that negative element
        	    # this will force us to start a new subarray when we encounter next positive element
        	    lmax = e
    	    if lmax >= gmax:
    	        res = [start, i]
    	    gmax = max(gmax, lmax)
    	result = arr[res[0]: res[1]+1]
    	if result[0] < 0:
    	    return [-1]
    	return result
            